/*! timeously v0.3.0 (Mon, 16 Apr 2018 04:59:27)

Timeous interval creation for precise milestone events
@module timeously
@author Ashley Brener <ashley@frisb.com>
@license MIT

The MIT License (MIT)

Copyright (c) 2016 frisB.com <play@frisb.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
    */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("moment-timezone")):"function"==typeof define&&define.amd?define("Timeously",["moment-timezone"],e):"object"==typeof exports?exports.Timeously=e(require("moment-timezone")):t.Timeously=e(t["moment-timezone"])}(window,function(t){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);let i={SECONDLY:"second",MINUTELY:"minute",HOURLY:"hour",DAILY:"day",WEEKLY:"dayOfWeek",MONTHLY:"month",YEARLY:"year"};function n(t,e){if("string"!=typeof t&&(t=""+t),e||(e=2),t.length===e)return t;let s=`000000000${t}`;return s.substr(s.length-e)}let r=s(1),o=-(new Date).getTimezoneOffset();class a{constructor(t){t?"string"==typeof t&&(t=new Date(t)):t=new Date,this.date=t,this._tzOffsetMinutes=-t.getTimezoneOffset()}static get MonthNames(){return["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}static get DayNames(){return["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]}get offsetString(){let t=this.tzOffsetMinutes;if(0===t)return"Z";return`${t>=0?"+":"-"}${n(Math.floor(Math.abs(t/60)))}:${n(Math.abs(t%60))}`}tz(t){return t||(t="GMT"),this.tzOffsetMinutes=r.tz(t).utcOffset(),this.minute+=this.tzOffsetMinutes-o,this}subtract(t){return this-t}toString(t){return t?t.replace("yyyy",this.year.toString()).replace("yy",this.year.toString().substr(2)).replace("MM",n(this.month+1)).replace("dd",n(this.day)).replace("HH",n(this.hour)).replace("mm",n(this.minute)).replace("ss",n(this.second)).replace("SSS",n(this.millisecond,3)).replace("Z",this.offsetString):this.toISOString(!0)}valueOf(){return this.date.getTime()}toUTCDate(){let t=new Date(this.date);return t.setMinutes(t.getMinutes()-this.tzOffsetMinutes+o),t}toISOString(t){return t?this.year+"-"+n(this.month+1)+"-"+n(this.day)+"T"+n(this.hour)+":"+n(this.minute)+":"+n(this.second)+"."+n(this.millisecond,3)+this.offsetString:this.toUTCDate().toISOString()}get millisecond(){return this.date.getMilliseconds()}set millisecond(t){this.date.setMilliseconds(t)}get second(){return this.date.getSeconds()}set second(t){this.date.setSeconds(t)}get minute(){return this.date.getMinutes()}set minute(t){this.date.setMinutes(t)}get hour(){return this.date.getHours()}set hour(t){this.date.setHours(t)}get day(){return this.date.getDate()}set day(t){this.date.setDate(t)}get dayOfWeek(){return this.date.getDay()}set dayOfWeek(t){this.date.setDay(t)}get dayName(){return a.DayNames[this.dayOfWeek]}get month(){return this.date.getMonth()}set month(t){this.date.setMonth(t)}get monthName(){return a.MonthNames[this.month]}get year(){return this.date.getFullYear()}set year(t){this.date.setFullYear(t)}get tzOffsetMinutes(){return this._tzOffsetMinutes}set tzOffsetMinutes(t){this._tzOffsetMinutes=t}get daysInMonth(){return new Date(this.year,this.month+1,0).getDate()}}class u{constructor(t){this.millisec=t||0;let e=t/1e3;this.days=~~(e/86400),this.hours=~~((e-86400*this.days)/3600),this.mins=~~((e-86400*this.days-3600*this.hours)/60),this.sec=~~(e-86400*this.days-3600*this.hours-60*this.mins)}get totalDays(){return this.days}get totalHours(){return~~(this.totalSec/3600)}get totalMins(){return~~(this.totalSec/60)}get totalSec(){return Math.ceil(this.millisec/1e3)}toString(){let t="";return this.days>0&&(t+=`${n(this.days)}:`),t+=`${n(this.hours)}:${n(this.mins)}:${n(this.sec)}`}}let h=["year","month","day","hour","minute","second","millisecond"],l={millisecond:1e3,second:60,minute:60,hour:24,month:12};class c{constructor(t,e){let{name:s,interval:n,type:r,tz:o,start:a,stop:u}=t;this.name=s?` ${s}`:"",this.interval=n||1,this.intervalType=r||i.MINUTELY,this.tz=o,this.callback=e,this.startTime=a,this.stopTime=u,this.started=!1,this.timerID=null,this.start()}get title(){let{interval:t,intervalType:e}=this;for(let s in i){if(i[s]===e)return`${t} ${s.toLowerCase()}`}}get now(){return(new a).tz(this.tz)}execute(){if(!this.timerID)return;this.callback();let t=this.calculateNextTimeout();this.setLongTimeout(t)}start(){let{title:t,name:e}=this,s=this.calculateNextTimeout(),i=new u(s);this.setLongTimeout(s),console.log(`Timeously starting ${t}${e} in T - ${i.toString()} and counting`)}stop(){let{title:t,name:e,now:s}=this;console.log(`[${t}]${e}: Called stop at ${s.toString()}`),this.started=!1,null!==this.timerID&&(clearTimeout(this.timerID),this.timerID=null)}calculateNextTimeout(){let{name:t,title:e,interval:s,intervalType:i,started:n,now:r,startTime:o,stopTime:a}=this,u=function(t,e){if("day"===t)return e.daysInMonth;{let e=l[t];if(!e)throw new Error(`Can not currently handle ${t} intervals`);return e}}(i,r),c=r;for(let t=6;t>=0;t--){let e=h[t];if(e===i)break;switch(e){case"day":c[e]=1;break;case"month":c[e]=0;break;default:c[e]-=c[e]}}c[i]++;let m=c[i];if(o)n?(c[i]+=s-1,a&&(function(t,e,s){return!e||!s||(e<s?t>=e&&t<=s:t>=e||t<=s)}(m=c[i],o,a)||(c[i]+=m>o?u-m+o:o-m))):(this.started=!0,c[i]+=m>o?u-m+o:o-m);else if(n)c[i]+=s-1;else for(this.started=!0;s>1&&c[i]%s!=0;)c[i]++;let d=c-this.now;return console.log(`[${this.now.toString()}] (${e})${t} - Next event is at ${c.toString()}. ${d}ms`),d}setLongTimeout(t){let e=this,{title:s,name:i}=e;e.timerID=t>864e5?setTimeout(function(){let n=t-864e5,r=Math.floor(n/864e5);console.log(`${s}${i}: Long timer - ${r} days remaining`),e.setLongTimeout(n)},864e5):setTimeout(function(){e.execute()},t)}}s.d(e,"INTERVAL_TYPE",function(){return i}),s.d(e,"TimeBucket",function(){return a}),s.d(e,"TimeSpan",function(){return u}),s.d(e,"Timeously",function(){return c})},function(e,s){e.exports=t}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,