{"version":3,"file":"timespan.js","sourceRoot":"","sources":["../src/timespan.ts"],"names":[],"mappings":";;AAAA,+BAA4B;AAE5B,MAAa,QAAQ;IAMnB,YAAmB,WAAmB,CAAC;QAApB,aAAQ,GAAR,QAAQ,CAAY;QACrC,MAAM,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC;QAE5B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAE5B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAEpD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QAEvE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1F,CAAC;IAED,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,IAAW,SAAS;QAClB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,QAAQ;QACb,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACxC,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,IAAI,GAAG,CAAC;YACV,KAAK,IAAI,GAAI,SAAG,CAAC,IAAI,CAAE,GAAG,CAAC;QAE7B,KAAK,IAAI,GAAI,SAAG,CAAC,KAAK,CAAE,IAAK,SAAG,CAAC,IAAI,CAAE,IAAK,SAAG,CAAC,GAAG,CAAE,EAAE,CAAC;QAExD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA7CD,4BA6CC","sourcesContent":["import { pad } from './pad';\n\nexport class TimeSpan {\n  public days: number;\n  public hours: number;\n  public mins: number;\n  public sec: number;\n\n  constructor(public millisec: number = 0) {\n    const sec = millisec / 1000;\n\n    this.days = ~~(sec / 86400);\n    // After deducting the days calculate the number of hours left\n    this.hours = ~~((sec - (this.days * 86400)) / 3600);\n    // After days and hours , how many minutes are left\n    this.mins = ~~((sec - (this.days * 86400) - (this.hours * 3600)) / 60);\n    // Finally how many seconds left after removing days, hours and minutes.\n    this.sec = ~~((sec - (this.days * 86400) - (this.hours * 3600) - (this.mins * 60))) + 1;\n  }\n\n  public get totalDays() {\n    return this.days;\n  }\n\n  public get totalHours() {\n    return ~~(this.totalSec / 3600);\n  }\n\n  public get totalMins() {\n    return ~~(this.totalSec / 60);\n  }\n\n  public get totalSec() {\n    return Math.ceil(this.millisec / 1000);\n  }\n\n  public toString(): string {\n    const { days, hours, mins, sec } = this;\n    let clock = '';\n\n    if (days > 0)\n      clock += `${ pad(days) }:`;\n\n    clock += `${ pad(hours) }:${ pad(mins) }:${ pad(sec) }`;\n\n    return clock;\n  }\n}\n"]}